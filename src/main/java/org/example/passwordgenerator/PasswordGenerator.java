package org.example.passwordgenerator;

import java.util.ArrayList;
import java.util.Random;
import java.security.SecureRandom;
import java.util.Scanner;

public class PasswordGenerator {

    // Found the problem definition here:  https://www.interviewbit.com/blog/java-projects/

    /**
     * The criteria for this java password generator as follows:
     * <p>
     * - At least 12 characters long
     * - a combination of uppercase letters, lowercase letters, numbers and symbols
     * - includes no words that can be found in a dictionary
     * <p>
     * Strategy
     * One way is to have a randomizer that simply chooses an ascii value (or whatever is used
     * nowadays) to generate d character beit a digit, letter or symbol from a range in the
     * allowable character set
     * <p>
     * The other might be to have several subprograms which will return a character of a certain
     * type when called, then to randomize calling of those modules.
     */

    public static final Scanner keyboard = new Scanner(System.in);
    public static void main(String[] args) {

        System.out.println("Welcome to the password generator. ");
        printMenu();

        String userChoice = "-1";

        while (!userChoice.equals("4")) {
            userChoice = keyboard.next();

            switch(userChoice) {
                case "1":
                    String result1 = generatePassword1();
                    System.out.println("Password generated by method one: " + result1);
                    break;

                case "2":
                    String result2 = generatePassword2();
                    System.out.println("Password generated by method two: " + result2);
                    break;

                case "3":
                    printUsefulInfo();
                    break;

                case "4":
                    printQuitMessage();
                    break;

            }
        }
        keyboard.close();
        System.out.println("Program exiting.");


    }

    public static String generatePassword1() {

        printGenerateSubmenu();

        ArrayList<Boolean> resultArray = queryResultArray();

        Alphabet ourAlphabet =  new Alphabet(
                resultArray.get(0),
                resultArray.get(1),
                resultArray.get(2),
                resultArray.get(3));

        String availableChars = ourAlphabet.getPool();

        StringBuilder result = new StringBuilder();

        Random random = new Random();

        int minPasswordLength = getRandomNumberInRange(12, 20);

        while(result.length() < minPasswordLength) {
            int index = (int)( random.nextFloat() * availableChars.length());
            result.append(availableChars.charAt(index));

        }
        return result.toString();
    }

    public static String generatePassword2() {

        StringBuilder result = new StringBuilder();
        int minPasswordLength = getRandomNumberInRange(12, 20);
        while (result.length() < minPasswordLength) {

            switch (getRandomNumberInRange(0, 4)) {
                case 0:
                    result.append(RandomCharacter.getRandomLowercase());
                    break;

                case 1:
                    result.append(RandomCharacter.getRandomUppercase());
                    break;

                case 2:
                    result.append(RandomCharacter.getRandomSymbolCharacter());
                    break;

                case 3:
                    result.append(RandomCharacter.getRandomDigitCharacter());
                    break;

            }
        }

        return result.toString();
    }

    public static int getRandomNumberInRange( int min, int max) {
        Random random = new Random();
        return random.nextInt( max - min) + min;
    }

    public static class RandomCharacter {
        /** Generate a random character between ch1 and ch2 */

        private static final SecureRandom secureRandom = new SecureRandom();
        public static char getRandomCharacter (char c1, char c2) {
            return (char) (c1 + secureRandom.nextFloat() * (c2 - c1 + 1) );
        }

        /** Generate a random lowercase letter */
        public static char getRandomLowercase() {
            return getRandomCharacter('a', 'z');
        }

        public static char getRandomUppercase() {
            return getRandomCharacter( 'A', 'Z');
        }

        public static char getRandomDigitCharacter() {
            return getRandomCharacter('0', '9');
        }

        public static char getRandomSymbolCharacter() {
            return getRandomCharacter('!', ')' );
        }

    }

    public static class Alphabet {

        public static StringBuilder pool;
        public static final String LOWERCASE_LETTERS = "abcdefghijklmnopqrstuvwxyz";
        public static final String UPPERCASE_LETTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        public static final String NUMERALS = "0123456789";
        public static final String SYMBOLS = "!@#$%^&*()-_=+\\/~?";

        public Alphabet(boolean includeLowercase, boolean includeUppercase, boolean includeNumerals, boolean includeSymbols) {

            pool = new StringBuilder();

            if (includeLowercase) pool.append(LOWERCASE_LETTERS);
            if (includeUppercase) pool.append(UPPERCASE_LETTERS);
            if (includeNumerals) pool.append(NUMERALS);
            if (includeSymbols) pool.append(SYMBOLS);

        }

        private static String getPool() {
            return pool.toString();
        }
    }

    public static void printMenu() {
        System.out.println();
        System.out.println("Enter 1 - Generate a new password with method 1.");
        System.out.println("Enter 2 - Generate a new password with method 2.");
        System.out.println("Enter 3 - Show useful information regarding passwords.");
        System.out.println("Enter 4 - Quit program.");
        System.out.println();

    }

    public static void printGenerateSubmenu() {
        System.out.println();
        System.out.println("Answer the following questions with regard to the characters to be used in your password.");
        System.out.println();
    }

    public static void printUsefulInfo() {
        System.out.println();
        System.out.println();
        System.out.println("Use a minimum password length of 8 or more characters if permitted");
        System.out.println("Include lowercase and uppercase alphabetic characters, numbers and symbols if permitted");
        System.out.println("Generate passwords randomly where feasible");
        System.out.println("Avoid using the same password twice (e.g., across multiple user accounts and/or software systems)");
        System.out.println("Avoid character repetition, keyboard patterns, dictionary words, letter or number sequences," +
                "\nusernames, relative or pet names, romantic links (current or past) " +
                "and biographical information (e.g., ID numbers, ancestors' names or dates).");
        System.out.println("Avoid using information that the user's colleagues and/or " +
                "acquaintances might know to be associated with the user");
        System.out.println("Do not use passwords which consist wholly of any simple combination of the aforementioned weak components");
        System.out.println();
    }

    public static void printQuitMessage() {
        System.out.println();
        System.out.println("Thanks for using the program.  Goodbye.");
    }

    public static ArrayList<Boolean> queryResultArray() {

        ArrayList<Boolean> resultArray = new ArrayList<>();
        String input;

        System.out.println("Do you want lowercase letters in your password?");
        if (keyboard.next().equals("Yes")) {
            resultArray.add(true);
        } else
            resultArray.add(false);

        System.out.println("Do you want uppercase letters in your password?");
        if (keyboard.next().equals("Yes")) {
            resultArray.add(true);
        } else
            resultArray.add(false);
        System.out.println("Do you want numerals in your password?");
        if (keyboard.next().equals("Yes")) {
            resultArray.add(true);
        } else
            resultArray.add(false);

        System.out.println("Do you want symbols in your password?");

        // gives multiple changes on typing either 'yes' or 'no' - case insensitive
        do {
            input = keyboard.next();
        } while (!input.equalsIgnoreCase("yes") && !input.equalsIgnoreCase("no"));
        resultArray.add(input.equalsIgnoreCase("Yes"));

       return resultArray;
    }


}
